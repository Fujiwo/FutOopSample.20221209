@startuml
class Program <<static>> {
    {static} Main() : void
}
interface ICommand {
    OnInput(point:Point) : bool
    OnCursorMove(point:Point) : bool
    Draw(graphics:Graphics) : void
}
abstract class Command {
    <<const>> penWidth : int = 10
    + <<virtual>> OnInput(point:Point) : bool
    + <<virtual>> OnCursorMove(point:Point) : bool
    + <<virtual>> Draw(graphics:Graphics) : void
}
class NullCommand {
}
class AddDotCommand {
    + <<override>> OnInput(point:Point) : bool
    + <<override>> OnCursorMove(point:Point) : bool
    + <<override>> Draw(graphics:Graphics) : void
}
class AddLineCommand {
    isFirst : bool = true
    + <<override>> OnInput(point:Point) : bool
    + <<override>> OnCursorMove(point:Point) : bool
    + <<override>> Draw(graphics:Graphics) : void
}
class AddCircleCommand {
    isFirst : bool = true
    + <<override>> OnInput(point:Point) : bool
    + <<override>> OnCursorMove(point:Point) : bool
    + <<override>> Draw(graphics:Graphics) : void
}
ICommand <|-- Command
Command o-> "pen" Pen
Command o-> "Model" Model
Command <|-- NullCommand
Command <|-- AddDotCommand
AddDotCommand --> "position" Point
Command <|-- AddLineCommand
AddLineCommand --> "start" Point
AddLineCommand --> "end" Point
Command <|-- AddCircleCommand
AddCircleCommand --> "center" Point
AddCircleCommand --> "lastPoint" Point
class CommandManager {
    + CommandManager(model:Model)
    + Set(command:Command) : void
    + OnInput(point:Point) : bool
    + OnCursorMove(point:Point) : bool
    + Draw(graphics:Graphics) : void
}
ICommand <|-- CommandManager
CommandManager o-> "currentCommand" Command
CommandManager --> "Model" Model
class EnumerableHelper <<static>> {
    + {static} ForEach(@this:IEnumerable<TElement>, action:Action<TElement>) : void
}
class Geometry <<static>> {
    + {static} Distance(@this:Point, other:Point) : int
    + {static} Difference(@this:Point, other:Point) : Size
    + {static} Absolute(@this:Size) : int
    + {static} BoundingBox(@this:(Point center, int radius)) : Rectangle
    + {static} BoundingBox(@this:IEnumerable<Point>) : Rectangle?
    {static} Square(value:int) : int
}
class Figure {
}
class DotFigure {
    + <<const>> Radius : int = 20
}
class LineFigure {
}
class CircleFigure {
    + Radius : int <<get>> <<set>>
}
class "IEnumerable`1"<T> {
}
Figure --> "Shapes<Shape>" "IEnumerable`1"
Figure <|-- DotFigure
DotFigure --> "Position" Point
DotFigure --> "Shapes<Shape>" "IEnumerable`1"
Figure <|-- LineFigure
LineFigure o-> "Position" Line
LineFigure --> "Start" Point
LineFigure --> "End" Point
LineFigure --> "Shapes<Shape>" "IEnumerable`1"
Figure <|-- CircleFigure
CircleFigure o-> "Position" Circle
CircleFigure --> "Center" Point
CircleFigure --> "Shapes<Shape>" "IEnumerable`1"
class Model <<partial>> {
    + Update : Action? <<get>> <<set>>
    + Model()
    + Model(container:IContainer)
    + Add(figure:Figure) : void
    + GetEnumerator() : IEnumerator<Figure>
    GetEnumerator() : IEnumerator
}
class "IEnumerable`1"<T> {
}
class "LinkedList`1"<T> {
}
Component <|-- Model
"IEnumerable`1" "<Figure>" <|-- Model
Model o-> "figures<Figure>" "LinkedList`1"
class Model <<partial>> {
    InitializeComponent() : void
}
class Shape {
}
class Dot {
    + <<const>> Radius : int = 20
}
class Line {
}
class Circle {
    + Radius : int <<get>> <<set>>
}
Shape <|-- Dot
Dot --> "Position" Point
Dot --> "BoundingBox" Rectangle
Shape <|-- Line
Line --> "Start" Point
Line --> "End" Point
Line --> "BoundingBox" Rectangle
Shape <|-- Circle
Circle --> "Center" Point
Circle --> "BoundingBox" Rectangle
class ShapeViewModel <<static>> {
    <<const>> penWidth : int = 10
    + {static} Draw(@this:Shape, graphics:Graphics) : void
}
ShapeViewModel o-> "color" Color
ShapeViewModel o-> "pen" Pen
ShapeViewModel o-> "brush" Brush
class MainForm <<partial>> {
    + MainForm()
    InitializeOthers() : void
    OnFileExit(sender:object, e:EventArgs) : void
    OnFigureDot(sender:object, e:EventArgs) : void
    OnFigureLine(sender:object, e:EventArgs) : void
    OnFigureCircle(sender:object, e:EventArgs) : void
    OnViewMouseClick(sender:object, e:MouseEventArgs) : void
    OnViewMouseMove(sender:object, e:MouseEventArgs) : void
}
Form <|-- MainForm
MainForm o-> "commandManager" CommandManager
class MainForm <<partial>> {
}
class View <<partial>> {
    + CommandManager : ICommand? <<get>> <<set>>
    + View()
    OnPaint(sender:object, e:PaintEventArgs) : void
}
UserControl <|-- View
class View <<partial>> {
}
@enduml
